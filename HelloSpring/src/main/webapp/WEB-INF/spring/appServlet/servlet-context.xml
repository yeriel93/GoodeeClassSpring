<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller 등록되어있는 아이들을 찾아주는 기능을 함 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.bs.spring" />
	
	<!-- pojo클래스 bean으로 등록하기 -->
	
	<!-- 기본생성자로 생성한것과 동일한 느낌 -> Animal alonge = new Animal();-->
	<!-- <beans:bean id="alonge" class="com.bs.spring.model.vo.Animal">
	</beans:bean> -->
	
	<!-- 생성된 객체에 setter를 이용해서 값을 대입 -->
	<!-- 타입이 다 달라도 value에는 ""붙여줘야함 spring이 자동으로 타입변환 함 -->
	<!-- <beans:bean id="alonge" class="com.bs.spring.model.vo.Animal">
		<beans:property name="name" value="아롱이"/>
		<beans:property name="age" value="8"/>
		<beans:property name="gender" value="여"/>
		<beans:property name="weight" value="5.8"/>
	</beans:bean> -->
	
	<!-- 매개변수 있는 생성자로 초기화하기 -->
	<!-- vo에 설정된 매개변수에 갯수와 타입에 맞춰서 작성해줘야 함 -->
<!-- 	<beans:bean id="alonge" class="com.bs.spring.model.vo.Animal">
		<beans:constructor-arg index="0" value="아롱이2"/>
		<beans:constructor-arg index="1" value="15"/>
  	<beans:constructor-arg index="2" value="남" />
		<beans:constructor-arg index="3" value="8.8" /> 
	</beans:bean> -->
	
	<!-- animal 객체를 두개 생성한다면..? -->
	<!-- 같은 타입이 2개이상 있으면 spring이 어떤것을 선택해야할지 모르기 때문에 NoUniqueBeanDefinitionException 에러가 발생함 -->
	<!-- 하지만 controller에서 호출할때 id값과 동일하게 필드명을 설정해주면 스프링이 알아서 찾아서 넣어줌 -->
	<!-- init-method="":객체 생성 후 실행되는 메소드 destroy-method="" : 객체 소멸(서버가 종료되거나 SessionTemplet에 close될때) 후 실행되는 메소드 -->
	<!-- <beans:bean id="dog" class="com.bs.spring.model.vo.Animal" init-method="initTest" destroy-method="destroyTest"/> -->
	
	
	<!-- 자식객체를 가지고 있는 부모객체 생성할때 ref 속성 사용-->
	<!-- <beans:bean id="yeonji" class="com.bs.spring.model.vo.Person">
		<beans:property name="name" value="연지"/>
		<beans:property name="age" value="31"/>
		<beans:property name="myAnimal" ref="alonge"/>
	</beans:bean> -->
	
	
	<!-- 인터셉터등록하기 -->
	<interceptors>
		<interceptor>
			<!-- 주소패턴으로 설정하는 값 filter, servlet url-patten 선언한것과 동일하게 작성 -->
			<mapping path="/demo/*"/>
			
			<!-- 특정매핑주소에 대해 예외처리를 할 수 있다. -->
			<exclude-mapping path="/demo/demo.do"/>
			
			<beans:bean class="com.bs.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/board/boardWrite.do"/>
			<beans:ref bean="logincheck"/>
		</interceptor>
	</interceptors>
	<beans:bean id="logincheck" class="com.bs.spring.common.interceptor.LoginCheckInterceptor"/>
	
	
	<!-- 파일업로드 처리할 resolver를 등록하기 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 1024가 기준 : 104857600은 100MB임 -->
		<beans:property name="maxUploadSize" value="104857600"/>
	</beans:bean>
	
	
	<!-- json컨버터 등록하기 -->
	<beans:bean id="jacksonconverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonconverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>		
	
	
	<!-- websocket 클래스 빈으로 등록하기 -->
	<beans:bean id="chatting" class="com.bs.spring.websocket.ChattingServer"/>
	
	<websocket:handlers>
	<websocket:mapping handler="chatting" path="/chatting"/>
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
		
</beans:beans>
